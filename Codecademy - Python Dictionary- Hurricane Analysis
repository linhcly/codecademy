# names of hurricanes
names = ['Cuba I', 'San Felipe II Okeechobee', 'Bahamas', 'Cuba II', 'CubaBrownsville', 'Tampico', 'Labor Day', 'New England', 'Carol', 'Janet', 'Carla', 'Hattie', 'Beulah', 'Camille', 'Edith', 'Anita', 'David', 'Allen', 'Gilbert', 'Hugo', 'Andrew', 'Mitch', 'Isabel', 'Ivan', 'Emily', 'Katrina', 'Rita', 'Wilma', 'Dean', 'Felix', 'Matthew', 'Irma', 'Maria', 'Michael']

# months of hurricanes
months = ['October', 'September', 'September', 'November', 'August', 'September', 'September', 'September', 'September', 'September', 'September', 'October', 'September', 'August', 'September', 'September', 'August', 'August', 'September', 'September', 'August', 'October', 'September', 'September', 'July', 'August', 'September', 'October', 'August', 'September', 'October', 'September', 'September', 'October']

# years of hurricanes
years = [1924, 1928, 1932, 1932, 1933, 1933, 1935, 1938, 1953, 1955, 1961, 1961, 1967, 1969, 1971, 1977, 1979, 1980, 1988, 1989, 1992, 1998, 2003, 2004, 2005, 2005, 2005, 2005, 2007, 2007, 2016, 2017, 2017, 2018]

# maximum sustained winds (mph) of hurricanes
max_sustained_winds = [165, 160, 160, 175, 160, 160, 185, 160, 160, 175, 175, 160, 160, 175, 160, 175, 175, 190, 185, 160, 175, 180, 165, 165, 160, 175, 180, 185, 175, 175, 165, 180, 175, 160]

# areas affected by each hurricane
areas_affected = [['Central America', 'Mexico', 'Cuba', 'Florida', 'The Bahamas'], ['Lesser Antilles', 'The Bahamas', 'United States East Coast', 'Atlantic Canada'], ['The Bahamas', 'Northeastern United States'], ['Lesser Antilles', 'Jamaica', 'Cayman Islands', 'Cuba', 'The Bahamas', 'Bermuda'], ['The Bahamas', 'Cuba', 'Florida', 'Texas', 'Tamaulipas'], ['Jamaica', 'Yucatn Peninsula'], ['The Bahamas', 'Florida', 'Georgia', 'The Carolinas', 'Virginia'], ['Southeastern United States', 'Northeastern United States', 'Southwestern Quebec'], ['Bermuda', 'New England', 'Atlantic Canada'], ['Lesser Antilles', 'Central America'], ['Texas', 'Louisiana', 'Midwestern United States'], ['Central America'], ['The Caribbean', 'Mexico', 'Texas'], ['Cuba', 'United States Gulf Coast'], ['The Caribbean', 'Central America', 'Mexico', 'United States Gulf Coast'], ['Mexico'], ['The Caribbean', 'United States East coast'], ['The Caribbean', 'Yucatn Peninsula', 'Mexico', 'South Texas'], ['Jamaica', 'Venezuela', 'Central America', 'Hispaniola', 'Mexico'], ['The Caribbean', 'United States East Coast'], ['The Bahamas', 'Florida', 'United States Gulf Coast'], ['Central America', 'Yucatn Peninsula', 'South Florida'], ['Greater Antilles', 'Bahamas', 'Eastern United States', 'Ontario'], ['The Caribbean', 'Venezuela', 'United States Gulf Coast'], ['Windward Islands', 'Jamaica', 'Mexico', 'Texas'], ['Bahamas', 'United States Gulf Coast'], ['Cuba', 'United States Gulf Coast'], ['Greater Antilles', 'Central America', 'Florida'], ['The Caribbean', 'Central America'], ['Nicaragua', 'Honduras'], ['Antilles', 'Venezuela', 'Colombia', 'United States East Coast', 'Atlantic Canada'], ['Cape Verde', 'The Caribbean', 'British Virgin Islands', 'U.S. Virgin Islands', 'Cuba', 'Florida'], ['Lesser Antilles', 'Virgin Islands', 'Puerto Rico', 'Dominican Republic', 'Turks and Caicos Islands'], ['Central America', 'United States Gulf Coast (especially Florida Panhandle)']]

# damages (USD($)) of hurricanes
damages = ['Damages not recorded', '100M', 'Damages not recorded', '40M', '27.9M', '5M', 'Damages not recorded', '306M', '2M', '65.8M', '326M', '60.3M', '208M', '1.42B', '25.4M', 'Damages not recorded', '1.54B', '1.24B', '7.1B', '10B', '26.5B', '6.2B', '5.37B', '23.3B', '1.01B', '125B', '12B', '29.4B', '1.76B', '720M', '15.1B', '64.8B', '91.6B', '25.1B']

list_length=range(len(names))

# deaths for each hurricane
deaths = [90,4000,16,3103,179,184,408,682,5,1023,43,319,688,259,37,11,2068,269,318,107,65,19325,51,124,17,1836,125,87,45,133,603,138,3057,74]

# write your update damages function here:
conversion = {"M": 1000000,
              "B": 1000000000}
def convert_damages_data(damages):
  new_list = []
  for i in range(len(damages)):
    if damages[i] == 'Damages not recorded':
      new_list.append('Damages not recorded')
    else:
      updated= conversion.get(damages[i][-1])*float(damages[i][:-1])
      new_list.append(updated)
  return new_list

updated_damages = convert_damages_data(damages)
# print(updated_damages)


# write your construct hurricane dictionary function here:

# nested_dict = dict({'outer_key': dict({'inner_key': 'inner_value'})})

def hurricane_dict(x):
  hurricanes={}
  for i in list_length:
    hurricane = {str(names[i]):
  {"Name":names[i],
  "Month":months[i],
  "Year":years[i],
  "Max Sustained Wind":max_sustained_winds[i],
  "Areas Affected":areas_affected[i],
  "Damage":updated_damages[i],
  "Deaths":deaths[i]}
  }
    hurricanes.update(hurricane)
  return hurricanes
hu = hurricane_dict(list_length)
# print(hu)

# write your construct hurricane by year dictionary function here:

def hurricane_year(hu_dict): #hu_dict is temp argument - to be defined by by the hu dictionary above 
  year_dict = {}
  for element in hu_dict: # iterate through hu_dict to define variables with values in hu_dict (2 variables below)
    current_year =hu_dict[element]['Year'] #1924
    current_cane =hu_dict[element] #{name:cuba,...}
    #after define variable, check if the variable exists with if statments and actions that follow if true or not true 
    if current_year not in year_dict.keys():
      year_dict[current_year]=[current_cane] #have to bracket the [current cane] to make it a list 
      # this is performing {1924:[{'Name': 'Cuba I', 'Month': 'October'}
    else:
      year_dict[current_year].append(current_cane) # we can append list format of current_cane to dictionary
      #this means if 1924 is already a key then append the list [{'Name': 'Cuba I', 'Month': 'October' to the list already stored with the key 1924
  return year_dict

# print(hurricane_year(hu))     

# write your count affected areas function here:

def area_count(hu_dict):
  area_affected_dict={}
  for hurricane in hu_dict:
    areas = (hu[hurricane]['Areas Affected'])
    for area in areas:
      if area not in area_affected_dict:
        area_affected_dict[area]=1
      else:
        area_affected_dict[area]+=1
  return area_affected_dict

affected_areas_count = area_count(hu)
# print(affected_areas_count)

# write your find most affected area function here:
# right now we don't know which place has the highest(max) count because the dictionary is not sorted from highest to lowest - so we write this function do determine with place has the highest count based on our previous dictionary  
def max_area(affected_areas_count_dict):
  max_area = ''
  max_area_count = 0 
  for area in affected_areas_count_dict:
    if affected_areas_count_dict[area] > max_area_count:
      max_area_count = affected_areas_count_dict[area]
      max_area = area
    else:
      pass
  return max_area,max_area_count

# print(max_area(affected_areas_count))


# write your greatest number of deaths function here:
# which hurricane has the most deaths
def hurricane_deaths(hu_dict):
  max_mortality_cane = ''
  max_mortality = 0
  for hurricane in hu:
    if hu[hurricane]['Deaths'] > max_mortality: 
      max_mortality = hu[hurricane]['Deaths']
      max_mortality_cane = hu[hurricane]['Name']
    else:
      pass
  return max_mortality_cane,max_mortality

# print(hurricane_deaths(hu))

# write your catgeorize by mortality function here:
mortality_scale = {0: 0,
                   1: 100,
                   2: 500,
                   3: 1000,
                   4: 10000}

def hu_mortality(hu_dict):
  hurricanes_by_mortality = {0:[],1:[],2:[],3:[],4:[],5:[]}
  #hurricanes_by_mortality = {0:[{'Cuba I:..}],1:[],2:[],3:[],4:[],5:[]}
  for hurricane in hu_dict:
    if hu_dict[hurricane]['Deaths'] <=100:
      hurricanes_by_mortality[1].append(hu_dict[hurricane])
    elif 100 < hu_dict[hurricane]['Deaths'] <=500:
      hurricanes_by_mortality[2].append(hu_dict[hurricane])
    elif 500 < hu_dict[hurricane]['Deaths'] <=1000:
      hurricanes_by_mortality[3].append(hu_dict[hurricane])
    elif 1000 < hu_dict[hurricane]['Deaths'] <=100000:
      hurricanes_by_mortality[4].append(hu_dict[hurricane])
    elif hu_dict[hurricane]['Deaths'] > 100000:
      hurricanes_by_mortality[5].append(hu_dict[hurricane])
    else:
      hurricanes_by_mortality[0].append(hu_dict[hurricane])
  return hurricanes_by_mortality

# print(hu_mortality(hu))

# write your greatest damage function here:
def greatest_damage(hu_dict):
  max_damage_cane = ''
  max_damage = 0
  for hurricane in hu_dict:
    if hu_dict[hurricane]['Damage'] == 'Damages not recorded':
      pass
    elif hu_dict[hurricane]['Damage'] > max_damage:
      max_damage=hu_dict[hurricane]['Damage']
      max_damage_cane = hu_dict[hurricane]['Name']
  return ("Max damage: "+max_damage_cane,str(max_damage)+" dollars")

# print(greatest_damage(hu))

# write your catgeorize by damage function here:
damage_scale = {0: 0,
                1: 100000000,
                2: 1000000000,
                3: 10000000000,
                4: 50000000000}
def rate_damage(hu_dict):
  hurricanes_by_damage = {0:[],1:[],2:[],3:[],4:[],5:[]}
  for hurricane in hu_dict:
    if hu_dict[hurricane]['Damage'] == 'Damages not recorded':
      pass
    elif hu_dict[hurricane]['Damage'] <=100000000:
      hurricanes_by_damage[1].append(hu_dict[hurricane])
    elif 100000000 < hu_dict[hurricane]['Damage'] <=1000000000:
      hurricanes_by_damage[2].append(hu_dict[hurricane])
    elif 1000000000 < hu_dict[hurricane]['Damage'] <=10000000000:
      hurricanes_by_damage[3].append(hu_dict[hurricane])
    elif 10000000000 < hu_dict[hurricane]['Damage'] <=50000000000:
      hurricanes_by_damage[4].append(hu_dict[hurricane])
    elif hu_dict[hurricane]['Damage'] > 50000000000:
      hurricanes_by_damage[5].append(hu_dict[hurricane])
    else:
      hurricanes_by_damage[0].append(hu_dict[hurricane])
  return hurricanes_by_damage

print(rate_damage(hu))

    




